/* Module that exports functions to load and lookup ground truth data from Themis */
import { parseSparqlResults } from './queryTools/parseSparqlResults';
import mandatarissenSparqlResult from '../data/mandatarissen.json';
import { normalizeString } from './similarity/similarity';
const mandatarissen = parseSparqlResults(mandatarissenSparqlResult);

/*
data in mandatarissen.json was generated by the following query:

PREFIX mandaat: <http://data.vlaanderen.be/ns/mandaat#>
PREFIX besluit: <http://data.vlaanderen.be/ns/besluit#>
PREFIX persoon: <https://data.vlaanderen.be/ns/persoon#>
PREFIX g: <https://data.vlaanderen.be/ns/generiek#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX org: <http://www.w3.org/ns/org#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX prov: <http://www.w3.org/ns/prov#>

SELECT ?legislatuur ?legislatuurLabel ?regering  ?van ?tot ?regeringsLabel ?mandataris ?voornaam ?familienaam ?bestuursfunctieLabel ?titel ?rangorde ?start ?einde ?persoon ?mandaat ?bestuursfunctie WHERE {
  ?legislatuur g:isTijdspecialisatieVan <http://themis.vlaanderen.be/id/bestuursorgaan/7f2c82aa-75ac-40f8-a6c3-9fe539163025> .
  ?legislatuur skos:prefLabel ?legislatuurLabel .
  ?regering g:isTijdspecialisatieVan ?legislatuur .
  ?regering skos:prefLabel ?regeringsLabel .
  ?regering prov:hadMember ?mandataris .
  ?regering prov:qualifiedGeneration ?creatie .
  ?creatie prov:atTime ?van .
  OPTIONAL {
    ?regering prov:qualifiedInvalidation ?opheffing .
    ?opheffing prov:atTime ?tot
  } .
  OPTIONAL { ?mandataris dcterms:title ?titel } .
  ?mandataris mandaat:start ?start .
  OPTIONAL { ?mandataris mandaat:einde ?einde } .
  OPTIONAL { ?mandataris mandaat:rangorde ?rangorde } .
  ?mandataris org:holds ?mandaat .
  ?mandaat org:role ?bestuursfunctie .
  ?bestuursfunctie skos:prefLabel ?bestuursfunctieLabel .
  ?mandataris mandaat:isBestuurlijkeAliasVan ?persoon .
  ?persoon persoon:gebruikteVoornaam ?voornaam .
  ?persoon foaf:familyName ?familienaam .
} ORDER BY ?start ?einde ?rangorde ?bestuursfunctieLabel
*/


/* The SPARQL results JSON format isn't exactly ideal to perform lookups,
so we re-shape the data to a more convenient format for what we need */
let regeringsData = {};
const createLookupDatasets = function () {
  // create a set of government legislatures, with a property containing each of their compositions, with the key being composed of the start date in DD-MM-YYY format.
  // These start dates also exist in Kaleidos for mandatarissen, and should make it easy to narrow down the set of possible matches
  regeringsData = {
    meta: {
      // some basic stats about the data
      aantalMandatarissen: 0,
      aantalSamenstellingen: 0
    },
    regeringen: {}
  };
  for (const mandataris of mandatarissen) {
    regeringsData.meta.aantalMandatarissen++
    // create the legislature if necessary
    let legislatuur = mandataris.legislatuur;
    if (!regeringsData.regeringen[legislatuur]) {
      regeringsData.regeringen[legislatuur] = {
        legislatuurLabel: mandataris.legislatuurLabel,
        regeringsLabel: mandataris.regeringsLabel,
        regering: mandataris.regering,
        van: mandataris.van,
        tot: mandataris.tot,
        samenstellingen: {},
        aantalSamenstellingen: 0
      };
    }
    // next create the composition if necessary
    let formattedStartDate = mandataris.start.substring(0,10); // get rid of any hours/minute/seconds suffixes we don't need
    if (!regeringsData.regeringen[legislatuur].samenstellingen[formattedStartDate]) {
      regeringsData.meta.aantalSamenstellingen++;
      regeringsData.regeringen[legislatuur].aantalSamenstellingen++;
      regeringsData.regeringen[legislatuur].samenstellingen[formattedStartDate] = {
        start: mandataris.start,
        einde: mandataris.einde,
        mandatarissen: []
      };
    }
    // now add the mandataris data
    const formattedMandataris = {
      mandataris: mandataris.mandataris,
      bestuursfunctieLabel: mandataris.bestuursfunctieLabel,
      rangorde: mandataris.rangorde,
      titel: mandataris.titel,
      persoon: mandataris.persoon,
      voornaam: mandataris.voornaam,
      familienaam: mandataris.familienaam,
      mandaat: mandataris.mandaat,
      bestuursfunctie: mandataris.bestuursfunctie,
      regeringsLabel: mandataris.regeringsLabel,
      regeringsDuurVan: mandataris.van,
      regeringsDuurTot: mandataris.tot,
      start: mandataris.start,
      einde: mandataris.einde,
      normalizedName: mandataris.voornaam && mandataris.familienaam? normalizeString(mandataris.voornaam + ' ' + mandataris.familienaam, 'name') : undefined,
      normalizedFirstName: mandataris.voornaam ? normalizeString(mandataris.voornaam, 'name') : undefined,
      normalizedFamilyName: mandataris.familienaam ? normalizeString(mandataris.familienaam, 'name') : undefined,
      normalizedTitel: mandataris.titel ? normalizeString(mandataris.titel, 'title') : undefined
    };
    regeringsData.regeringen[legislatuur].samenstellingen[formattedStartDate].mandatarissen.push(formattedMandataris);
  }
  // NOTE: the following fixes a fault in the constructed dataset, where the end date of one composition is sometimes 24 hours apart from the start of the next composition.
  // this likely has to do with it being an 'end day', and it is formatted as, for example 1992-01-07T00:00:00Z, whereas it should be 1992-01-07T23:59:59Z
  // this is important for later matching, so we need to correct it here.
  for (const regeringsUrl in regeringsData.regeringen) {
    if (regeringsData.regeringen.hasOwnProperty(regeringsUrl)) {
      const regering = regeringsData.regeringen[regeringsUrl];
      for (const samenstellingStart in regering.samenstellingen) {
        if (regering.samenstellingen.hasOwnProperty(samenstellingStart) && regering.samenstellingen[samenstellingStart].einde) {
          // the last composition of Homans I has an end date that's one off
          if (samenstellingStart === '2019-07-19') {
            regering.samenstellingen[samenstellingStart].einde = regering.samenstellingen[samenstellingStart].einde.replace('2019-10-02', '2019-10-01');
          }
          regering.samenstellingen[samenstellingStart].einde = regering.samenstellingen[samenstellingStart].einde.replace('T00:00:00Z', 'T23:59:59Z');
        }
      }
    }
  }
};
createLookupDatasets();

export default regeringsData;
